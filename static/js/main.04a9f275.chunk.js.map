{"version":3,"sources":["appDispatcher.js","actions/actionTypes.js","stores/formsStore.js","App.js","actions/formsActions.js","reportWebVitals.js","index.js"],"names":["dispatcher","Dispatcher","CHANGE_EVENT","eventsArr","eventTitle","index","eventStore","callback","this","on","removeListener","emit","ind","EventEmitter","register","action","actionType","actionTypes","push","id","uuidv4","name","newConcert","console","log","emitChange","newSpectacl","newMovie","EventCity","useState","getEventCity","eventArr","setEventArr","value","setValue","onChangeStore","useEffect","addChangeListener","removeChangeListener","className","getEventTitle","indexOut","onSubmit","event","concert","preventDefault","dispatch","title","type","placeholder","onChange","target","map","item","City","handlerClick","getIndex","onClick","to","About","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04a9f275.chunk.js","sourcesContent":["import { Dispatcher } from \"flux\";\r\nconst dispatcher = new Dispatcher();\r\nexport default dispatcher;\r\n","export default {\r\n ADD_CONCERT: \"concert\",\r\n ADD_SPECTACL: \"spectacl\",\r\n ADD_MOVIE: \"movie\"\r\n};","import { EventEmitter } from \"events\";\r\nimport dispatcher from \"../appDispatcher\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst CHANGE_EVENT = \"change\";\r\nlet eventsArr = [[],[],[]];\r\nlet eventTitle = [\"Concert\", \"Spectacl\", \"Movie\"];\r\nlet index = 0;\r\n\r\nclass EventStore extends EventEmitter {\r\n  addChangeListener(callback) {\r\n    this.on(CHANGE_EVENT, callback);\r\n  }\r\n  removeChangeListener(callback) {\r\n    this.removeListener(CHANGE_EVENT, callback);\r\n  }\r\n  emitChange() {\r\n    this.emit(CHANGE_EVENT);\r\n  }\r\n  getEventCity() {\r\n    return eventsArr;\r\n  }\r\n\r\n  getEventTitle() {\r\n    return eventTitle;\r\n  }\r\n\r\n  getIndex(ind) {\r\n      index  = ind;\r\n      return index\r\n  }\r\n\r\n  indexOut() {\r\n      return index\r\n  }\r\n}\r\n\r\nconst eventStore = new EventStore();\r\n\r\ndispatcher.register((action) => {\r\n  switch (action.actionType) {\r\n    case actionTypes.ADD_CONCERT:\r\n      eventsArr[index].push({ id: uuidv4(), name: action.newConcert });\r\n      console.log( eventsArr[index]);\r\n      eventStore.emitChange();\r\n      break;\r\n    case actionTypes.ADD_SPECTACL:\r\n      eventsArr[index].push({ id: uuidv4(), name: action.newSpectacl });\r\n      console.log( eventsArr[index]);\r\n      eventStore.emitChange();\r\n      break;\r\n    case actionTypes.ADD_MOVIE:\r\n      eventsArr[index].push({ id: uuidv4(), name: action.newMovie });\r\n      console.log( eventsArr[index]);\r\n      eventStore.emitChange();\r\n      break;\r\n    default:\r\n  }\r\n});\r\n\r\nexport default eventStore;","import React, { useState, useEffect } from \"react\";\nimport eventStore from \"./stores/formsStore\";\nimport * as forms from \"./actions/formsActions\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport './App.css';\n\n\nfunction EventCity() {\n \n  const [eventArr, setEventArr] = useState(eventStore.getEventCity());\n  const [value, setValue] = useState(\"\");\n  const handlerChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const handlerSubmit = (event) => {\n    event.preventDefault();\n    \n    forms.addConcert(value);\n    setValue(\"\");\n  };\n\n  useEffect(() => {\n    eventStore.addChangeListener(onChangeStore);\n    return () => {\n      eventStore.removeChangeListener(onChangeStore);\n    };\n  }, []);\n  function onChangeStore() {\n    setEventArr(eventStore.getEventCity());\n  }\n\n  return (\n    <div className=\"form\">\n      <h3>{eventStore.getEventTitle()[eventStore.indexOut()]}</h3>\n      <form onSubmit={handlerSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          placeholder={eventStore.getEventTitle()[eventStore.indexOut()]}\n          onChange={handlerChange}\n        />\n        <input type=\"submit\" value=\"Добавить события\" />\n      </form>\n      <div className=\"texts\">\n        {eventArr[eventStore.indexOut()].map((item) => (\n          <p className=\"text\" key={item.id}>{item.name}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n\nfunction City() {\n    const handlerClick = (event)=> {\n    eventStore.getIndex(event.target.id);\n    console.log(eventStore.getEventTitle()[eventStore.indexOut()]);\n}\n  return (\n    <div className=\"city\">\n      <Link id=\"0\" onClick={handlerClick} to=\"/concert\" className=\"links\">\n        Concert\n      </Link>\n      <Link id=\"1\"  onClick={handlerClick} to=\"/spectacl\" className=\"links\">\n        Spectacl\n      </Link>\n      <Link id=\"2\" onClick={handlerClick} to=\"/movie\" className=\"links\">\n        Movie\n      </Link>\n      \n    </div>\n  );\n}\n\nfunction About() {\nreturn (\n  <div className=\"citys\">\n      <h2>События города</h2>\n      <p>Го́род — крупный населённый пункт, жители которого заняты, как правило, не сельским хозяйством. Имеет развитый комплекс хозяйства и экономики. Является скоплением архитектурных и инженерных сооружений, обеспечивающих жизнедеятельность постоянного и временного населения города.\n        Исторически термин происходит от наличия вокруг поселения оборонительной ограды — вала или стены. В Древней Руси городом называлось всякое крупное жилое место, окружённое такой оградой. Города служили центром развития искусства и ремёсел, технических достижений.\n        Разрастаясь, города образуют городские агломерации. Особенно важную роль для стран и континентов играют столицы, а также города-миллионники или агломерации-миллионеры[en] (имеющие численность населения более 1 миллиона человек), в том числе мегалополисы и глобальные города.</p>\n  </div>\n)\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <City />\n          <Switch>\n            <Route exact path=\"/\" component={About} />\n            <Route path=\"/concert\" component={EventCity} />\n            <Route path=\"/spectacl\" component={EventCity} />\n            <Route path=\"/movie\" component={EventCity} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\n\n\n\n\n","import dispatcher from \"../appDispatcher\";\r\nimport actionTypes from \"./actionTypes\";\r\n\r\nexport function addConcert(concert) {\r\n  dispatcher.dispatch({\r\n    actionType: actionTypes.ADD_CONCERT,\r\n    newConcert: concert,\r\n    title: \"concert\"\r\n  });\r\n}\r\n\r\nexport function addSpectacl(spectacl) {\r\n  dispatcher.dispatch({\r\n    actionType: actionTypes.ADD_SPECTACL,\r\n    newSpectacl: spectacl,\r\n    title: \"spectacl\"\r\n  });\r\n}\r\n\r\nexport function addMovie(movie) {\r\n  dispatcher.dispatch({\r\n    actionType: actionTypes.ADD_MOVIE,\r\n    newMovie: movie,\r\n    title: \"movie\"\r\n  });\r\n}\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}